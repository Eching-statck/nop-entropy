<c:unit xpl:outputMode="text">//__XGEN_FORCE_OVERRIDE__
    package ${servicePackageName};

    import java.util.concurrent.CompletionStage;
    import io.nop.core.context.IServiceContext;
    import io.nop.api.core.beans.FieldSelectionBean;

    <gen:CollectApiMessageImports xpl:lib="/nop/codegen/xlib/gen.xlib"
                                  serviceModel="${serviceModel}" xpl:return="types" />
    <c:for var="type" items="${types}">
        import ${type};
    </c:for>

    <c:script>
        function normalizeReturnType(type){
        return type == 'void' ? 'Void' : type;
        }
    </c:script>

    /**
     * ${serviceModel.displayName} ${serviceModel.description}
     */
    @SuppressWarnings({"PMD"})
    public interface ${serviceModel.name}Spi{

    <c:for var="method" items="${serviceModel.methods}">
        <c:choose>
            <when test="${method.tagSet?.contains('sync')}"><![CDATA[
     /**
      * ${method.displayName} ${method.description}
      */
     ${method.simpleResponseMessage} ${method.name}(${method.voidRequest ? '': method.simpleRequestMessage + ' request,'}
            FieldSelectionBean selection, IServiceContext ctx);
            ]]></when>
            <otherwise><![CDATA[
     /**
      * ${method.displayName} ${method.description}
      */
     CompletionStage<${normalizeReturnType(method.simpleResponseMessage)}> ${method.name}Async(${method.voidRequest ? '': method.simpleRequestMessage + ' request,'}
            FieldSelectionBean selection, IServiceContext ctx);
            ]]></otherwise>
        </c:choose>
    </c:for>
    }
</c:unit>